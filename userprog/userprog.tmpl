		     +--------------------------+
       	       	     |		CS 318		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- Student Details ----

Dilmith D.L.S. dilmithdls.22@uom.lk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

- Pintos documentation and provided resouses in the moodle were consulted 
while making the submission.
- In addition to that:
https://slideplayer.com/slide/7988080/
https://youtu.be/dQyvVZzTV5E



			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- `void *stack_ptr` (in setup_stack):
Used to manage the stack pointer during the initial setup of 
command-line arguments for the new process.

- `char **arg_array, char **arg_address_array` (in setup_stack):
Temporary arrays that hold parsed command-line arguments and their 
addresses to ensure correct ordering and alignment on the stack.

- `struct file *program_file` (in load):
Synchronizes initial process loading by blocking 
execution until a success/failure status is confirmed.



---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

- Argument parsing is accomplished by separating `file_name` into 
individual arguments using `strtok_r()`. These arguments are stored 
in reverse on the stack to achieve proper ordering in `argv[]`. 
Care is taken to prevent stack overflow by calculating and checking 
required space.



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

- `strtok_r()` is reentrant, making it safe in concurrent contexts 
like Pintos. In contrast, `strtok()` is not thread-safe, making 
it less suitable for multi-threaded environments.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- The Unix shell handles argument parsing, which allows commands to 
remain OS-agnostic and enables more flexible command-line syntax. 
This approach also reduces complexity in the kernel by offloading 
parsing to the user level.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- `struct file_descriptor`:
Associates a process’s file descriptor with an open file, keeping 
track of file state within the thread.

- `lock file_system_lock`:
Coordinates file operations across threads to prevent race 
conditions by serializing access to shared resources.

- `struct list open_fd_list`:
Tracks file descriptors per thread to ensure proper handling of 
file system operations within each process context.



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

- File descriptors are maintained as part of each thread’s data, 
enabling per-process management of open files. Thus, descriptors 
are unique to each process, allowing reuse across different 
processes without conflict.



---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

- Data is accessed from user space through strict pointer validation 
via `validate_ptr()` before proceeding. System call arguments are 
carefully validated, ensuring that each memory access remains within 
allowed boundaries.



>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

- If a system call triggers a full-page (4096 bytes) memory transfer, 
each byte could require validation, resulting in 4096 
`pagedir_get_page()` calls. For a small (2-byte) transfer, as few as 
one or two validations may suffice. Batch validation could optimize 
performance by reducing the number of individual checks.



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

- The `wait()` call uses semaphores to halt the parent process until 
a child finishes execution. The termination status is stored and 
returned to the parent, freeing resources upon process completion.



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

- Each memory access in a system call is validated independently to 
handle potential errors gracefully. When invalid pointers are 
detected, resources are freed, and the process is safely 
terminated. This structured validation allows primary logic to 
remain clean and maintainable. For instance, `write()` terminates 
upon invalid buffer detection, releasing locks immediately.



>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

- To ensure `exec()` returns only after loading completes, 
`sema_down()` on `init_sema` pauses the calling thread until load 
status is determined, with success/failure set by the child process 
and returned to the caller.



>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

- The parent process’s `wait()` function employs synchronization to 
ensure correct status retrieval regardless of child exit timing. 
If the parent terminates early, resources related to the child 
process are released at the next appropriate juncture, ensuring 
no resource leakage or race conditions.



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

- The user memory access approach chosen is effective for minimizing 
pointer-related faults while keeping the codebase manageable. 
It simplifies error handling while ensuring user inputs are verified 
consistently.



>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

- This design for file descriptors, with each descriptor unique to 
its process, offers a clear way to track open files while minimizing 
potential cross-process interference. It does add per-thread 
tracking overhead but improves resource isolation.



>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

- The default mapping from `tid_t` to `pid_t` was retained 
as-is, offering simplicity and fulfilling project requirements 
without unnecessary complexity.




			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

- This assignment struck a challenging balance but was doable within the 
given timeframe.



>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

- Implementing `exec()` and `wait()` gave insights into process 
synchronization and inter-process communication in OS.



>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

- Clarifying the use of `sema_down()` and `sema_up()` for synchronization 
in process loading would be helpful.



>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

- More Q&A or troubleshooting sessions on argument parsing 
and stack management would be beneficial.


>> Any other comments?

- The project offered a strong foundation in practical OS design pri
nciples, especially in handling threads and system calls.

